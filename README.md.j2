# Cluster Defaults Helm Chart

A Helm chart for deploying cluster-wide default resources including priority classes and resource quotas for Kubernetes clusters.

{% if repo_type == 'gitlab' -%}
{% include '.gitlab/badges.md' %}
{%- endif %}

## Table of content
<!--TOC-->

- [Table of content](#table-of-content)
- [Overview](#overview)
- [Features](#features)
- [Priority Classes](#priority-classes)
  - [System Critical (Built-in)](#system-critical-built-in)
  - [Critical Production (1000-10000)](#critical-production-1000-10000)
  - [High Production (500-999)](#high-production-500-999)
  - [Standard Production (100-499)](#standard-production-100-499)
  - [Background Services (50-99)](#background-services-50-99)
  - [Development (10-49)](#development-10-49)
  - [Low Priority (-10 to 9)](#low-priority--10-to-9)
  - [Specialized Categories](#specialized-categories)
- [Installation](#installation)
  - [Prerequisites](#prerequisites)
  - [Install Chart](#install-chart)
- [Configuration](#configuration)
  - [Basic Configuration](#basic-configuration)
  - [Disable Categories](#disable-categories)
  - [Custom Priority Classes](#custom-priority-classes)
- [Usage](#usage)
- [Values File Examples](#values-file-examples)
  - [Production Environment](#production-environment)
  - [Development Environment](#development-environment)
- [Best Practices](#best-practices)
- [Troubleshooting](#troubleshooting)
  - [Check Priority Classes](#check-priority-classes)
  - [Verify Pod Priority](#verify-pod-priority)
- [Contributing](#contributing)
- [Changelog](#changelog)
  - [v1.0.0](#v100)

<!--TOC-->

## Overview

This chart deploys essential cluster-wide resources that define workload priorities and resource allocation policies. It provides a comprehensive set of priority classes organized by workload types and criticality levels.

## Features

- **Comprehensive Priority Classes**: Pre-configured priority classes for different workload types
- **Flexible Configuration**: Enable/disable priority class categories as needed
- **Environment-Specific Values**: Support for different cluster configurations
- **Best Practices**: Follows Kubernetes priority class best practices

## Priority Classes

### System Critical (Built-in)

- `system-cluster-critical` (2000000000) - Core cluster components
- `system-node-critical` (2000000000) - Node-level system pods

### Critical Production (1000-10000)

- `critical-production` (5000) - Business-critical applications
- `database-critical` (4500) - Primary databases
- `security-critical` (4000) - Security and authentication services

### High Production (500-999)

- `high-production` (800) - Important production services
- `monitoring-high` (750) - Critical monitoring systems
- `ingress-controllers` (700) - Load balancers and ingress

### Standard Production (100-499)

- `standard-production` (200) - Default production workloads **[DEFAULT]**
- `api-services` (180) - Standard API endpoints
- `web-frontend` (150) - Web applications

### Background Services (50-99)

- `background-processing` (75) - Batch jobs and data processing
- `logging` (70) - Log collection
- `monitoring-standard` (65) - Non-critical monitoring

### Development (10-49)

- `development` (40) - Development environment workloads
- `staging` (35) - Staging and pre-production
- `qa-testing` (30) - Quality assurance and testing

### Low Priority (-10 to 9)

- `batch-jobs` (5) - Non-urgent batch processing
- `research` (2) - Experimental workloads
- `preemptible` (-10) - Interruptible workloads

### Specialized Categories

- **Data Processing**: `streaming-high`, `analytics-medium`, `etl-low`
- **Machine Learning**: `ml-inference`, `ml-training`, `ml-experiments`
- **Storage & Backup**: `storage-critical`, `backup-high`, `backup-routine`

## Installation

### Prerequisites

- Kubernetes 1.19+
- Helm 3.x

### Install Chart

```bash
# Add the repository
helm repo add spirit-dev https://gitlab-internal.spirit-dev.net/api/v4/projects/infrastructure/helm/cluster-defaults/packages/helm/stable

# Update repository

helm repo update

# Install the chart

helm install cluster-defaults spirit-dev/cluster-defaults

# Install with custom values

helm install cluster-defaults spirit-dev/cluster-defaults -f values-production.yaml
```

## Configuration

### Basic Configuration

```yaml
priorityClasses:
  enabled: true

  standardProduction:
    enabled: true
    classes:
      standard-production:
        value: 200
        description: "Default priority for production workloads"
        globalDefault: true
```

### Disable Categories

```yaml
priorityClasses:
  development:
    enabled: false  # Disable all development priority classes

  specialized:
    enabled: false  # Disable specialized workload classes
```

### Custom Priority Classes

```yaml
priorityClasses:
  specialized:
    enabled: true
    classes:
      custom-workload:
        value: 150
        description: "Custom workload priority"
        globalDefault: false
```

## Usage

Apply priority classes to your workloads:

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-app
spec:
  template:
    spec:
      priorityClassName: standard-production  # Use the priority class
      containers:
      - name: app
        image: my-app:latest
```

## Values File Examples

### Production Environment

```yaml
priorityClasses:
  enabled: true
  development:
    enabled: false    # Disable dev classes in production
  lowPriority:
    enabled: false    # Disable preemptible workloads
```

### Development Environment

```yaml
priorityClasses:
  enabled: true
  criticalProduction:
    enabled: false    # No critical production in dev
  development:
    enabled: true
    classes:
      development:
        globalDefault: true  # Make dev default in dev clusters
```

## Best Practices

1. **Priority Ranges**: Use the recommended priority ranges for different workload types
2. **Global Default**: Only set one priority class as `globalDefault: true`
3. **Naming**: Use descriptive names that indicate both environment and criticality
4. **Resource Requests**: Always set resource requests when using high-priority classes
5. **Testing**: Test priority class behavior in non-production environments first

## Troubleshooting

### Check Priority Classes

```bash
kubectl get priorityclasses
kubectl describe priorityclass standard-production
```

### Verify Pod Priority

```bash
kubectl get pod my-pod -o jsonpath='{.spec.priority}'
kubectl get pod my-pod -o jsonpath='{.spec.priorityClassName}'
```

## Contributing

1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Test with `helm template` and `helm lint`
5. Submit a pull request

## Changelog

### v1.0.0

- Initial release
- Comprehensive priority class definitions
- Flexible category-based configuration
- Support for environment-specific deployments
